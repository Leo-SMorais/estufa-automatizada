#include <LiquidCrystal.h> //Parametrização do LCD


const int rs=8,en=9,d4=10,d5=11,d6=12,d7=13;  
LiquidCrystal lcd(rs,en,d4,d5,d6,d7);



// Temperatura
const int pino_tmp = A4;
const int pino_lampada_inc = 3;
const int pino_pot_tpp = A3;
float leitura_sensor = 0;
float tensao = 0;
int temperatura = 0;
int pot_tpp = 0;
int temp_ideal = 0;



// Iluminacao
const int pino_lampada = 2;
const int pino_pot_ill = A2;   
int pot_ill = 0;
long tempo_ligado = 0;
int horas = 0;



//Temporizador
long controle_de_tempo = 0;



// Irrigacao
const int pino_pot_irr = A1;
const int pino_sensor = A0;
const int pino_bomba = 4;
int verificar_bomba = 0;
int bomba_verificada = 0; 
int limiar_seco = 0;
int umidade_solo = 0;
int pot_irr = 0;



void setup() {

// LCD
  Serial.begin(9600);
  lcd.begin (20,4);
  lcd.setCursor(0,0);
  lcd.print("Configuracao da estufa");



 // Temperatura
  pinMode(pino_tmp, INPUT);
  pinMode(pino_lampada_inc, OUTPUT);
  pinMode(pino_pot_tpp, INPUT);



 // Iluminacao
  pinMode(pino_lampada, OUTPUT);
  pinMode(pino_pot_ill, INPUT);


 // Irrigacao
  pinMode(pino_bomba, OUTPUT);
  pinMode(pino_sensor, INPUT);
  pinMode(pino_pot_irr, INPUT);
}



void loop() {



 controle_de_tempo = millis();



 // Temperatura
 
  leitura_sensor = analogRead(pino_tmp);
  pot_tpp = analogRead(pino_pot_tpp);
  temp_ideal = map (pot_tpp, 0, 1023, 0, 40);

  
  // Equacao de conversao do sensor de temperatura
  tensao = (5*leitura_sensor)/1023; 
  temperatura = (tensao-0.5)*100;



  // Contador - funcao delay
  if (controle_de_tempo % 1000 == 0) {
    lcd.setCursor(0,1);
    lcd.print("Temperatura ideal:");
    lcd.print("  ");
    if (temp_ideal < 10){
      lcd.setCursor(19,1);
    } else {
      lcd.setCursor(18,1);
    }
    lcd.print(temp_ideal);
    Serial.print("Temperatura ideal:");
    Serial.println(temp_ideal); 
    Serial.println(temperatura); 
  }



 // Histerese
  if (temperatura >= temp_ideal + 2){
    digitalWrite(pino_lampada_inc, LOW);
  } else if (temperatura < temp_ideal - 2) {
    digitalWrite(pino_lampada_inc, HIGH);
  }


 
   // Iluminacao
   
   pot_ill = analogRead(pino_pot_ill);
   horas = map (pot_ill, 0, 1023, 1, 24);
   tempo_ligado = horas * 1000;   //(long) horas * 3600000L;
   


  // Contador - funcao delay
  if (controle_de_tempo % 1000 == 0) {
    lcd.setCursor(0,2);
    lcd.print("horas ligada:");
    lcd.print("  ");
    if (horas < 10){
      lcd.setCursor(15,2);
    } else {
      lcd.setCursor(14,2);
    }
    lcd.print(horas);
    Serial.print("Tempo Ligado:");
    Serial.println(horas);
  }



  // Controle da ligacao da lampada
  controle_de_tempo = controle_de_tempo % 86400000L; // reinicia a cada 24 horas
  if (controle_de_tempo <= tempo_ligado) {
    digitalWrite (pino_lampada, HIGH);
  } else if (controle_de_tempo > tempo_ligado){
    digitalWrite (pino_lampada, LOW);
  }



  // Irrigacao
 
    umidade_solo = analogRead(pino_sensor);
    umidade_solo = map(umidade_solo, 1023, 0, 0, 100);  //escala do sensor
    pot_irr = analogRead(pino_pot_irr);
    limiar_seco = map(pot_irr, 0, 1023, 0, 100);



 // Contador - funcao delay
  if (controle_de_tempo % 1000 == 0) {   
    lcd.setCursor(0,3);
    lcd.print("Umidade ideal:");
    lcd.print("  ");
    if (limiar_seco < 10){
      lcd.setCursor(16,3);
    } else {
      lcd.setCursor(15,3);
    }
    lcd.print(limiar_seco);
    Serial.print("Umidade ideal:");
    Serial.println(limiar_seco);
    Serial.println(umidade_solo);
  }



 if (controle_de_tempo % 2000 == 0) { // intervalo deve ser escrito em milisegundos
  verificar_bomba = 1;
 }
 if (verificar_bomba == 1){
      if (umidade_solo < limiar_seco){
        digitalWrite (pino_bomba, HIGH);
      } else if (umidade_solo >= limiar_seco){
        digitalWrite (pino_bomba, LOW);
        bomba_verificada = 1;
      } 
  } else if (bomba_verificada == 1){
    verificar_bomba = 0;
    bomba_verificada = 0;
  }
}
